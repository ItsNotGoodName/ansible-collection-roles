# vim:ft=yaml.ansible
---
- name: "Create user {{ ct_user }}"
  ansible.builtin.user:
    name: "{{ ct_user }}"
    shell: "{{ ct_shell | default(omit) }}"
    groups: "{{ ct_groups | default(omit) }}"
    append: true
  register: ct_user_register
  become: true
  tags: ct

- name: Create ct directory
  ansible.builtin.file:
    path: "{{ ct_path }}"
  become: true
  become_user: "{{ ct_user }}"
  tags: ct

- name: Sync ct files
  ansible.posix.synchronize:
    src: "{{ ct_files }}"
    dest: "{{ ct_path }}/"
  when: ct_files is defined
  become: true
  become_user: "{{ ct_user }}"
  tags: ct

- name: Set .env file
  ansible.builtin.copy:
    content: "{{ ct_env_content }}"
    dest: "{{ ct_path }}/.env"
    mode: "644"
  become: true
  become_user: "{{ ct_user }}"
  tags: ct

- name: Start/update containers
  ansible.builtin.command:
    chdir: "{{ ct_path }}/{{ item }}"
    cmd: "docker compose up -d {{ ('ct_update' in ansible_run_tags) | ternary('--pull always', '') }}"
  loop: "{{ ct_containers }}"
  changed_when: true
  become: true
  tags:
    - never
    - ct_update
    - ct_start
  when: "'ct_start' in ansible_run_tags or 'ct_update' in ansible_run_tags"

- name: Prune everything
  community.docker.docker_prune:
    containers: true
    images: true
    networks: true
    volumes: true
    builder_cache: true
  become: true
  tags:
    - never
    - ct_prune
  when: "'ct_prune' in ansible_run_tags"
